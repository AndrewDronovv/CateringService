// <auto-generated />
using System;
using CateringService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CateringService.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250627193005_AddNullableToUpdatedAtCompanyEntity")]
    partial class AddNullableToUpdatedAtCompanyEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("Id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Comment")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Region")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("StreetAndBuilding")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("char(6)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("Zip")
                        .IsUnique();

                    b.HasIndex("City", "StreetAndBuilding")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("City", "StreetAndBuilding"), "GIN");

                    b.ToTable("Addresses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ8KTMVRFZT58GQX902JD1",
                            City = "New York",
                            Comment = "Office address",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 4, 21, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Main headquarters",
                            Region = "NY",
                            StreetAndBuilding = "123 Main St",
                            TenantId = "01H5PY6RF4WKFCR9VCMY2QNFGP",
                            Zip = "100001"
                        },
                        new
                        {
                            Id = "01H5QJ8RTMVRFZT58GQX902JD2",
                            City = "Berlin",
                            Comment = "Warehouse",
                            Country = "Germany",
                            CreatedAt = new DateTime(2025, 4, 22, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            Description = "Storage facility",
                            Region = "Berlin",
                            StreetAndBuilding = "45 Berliner Str.",
                            TenantId = "01H5QJ6PVB8FYN4QXMR3T7JC9A",
                            Zip = "200002"
                        },
                        new
                        {
                            Id = "01H5QJ9ZTMVRFZT58GQX902JD3",
                            City = "Tokyo",
                            Comment = "Retail store",
                            Country = "Japan",
                            CreatedAt = new DateTime(2025, 4, 23, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Flagship location",
                            Region = "Kanto",
                            StreetAndBuilding = "7-2 Shibuya",
                            TenantId = "01H5QJ7XQZKTYZ9QW8VRCMND5B",
                            Zip = "300003"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("Id");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NULL");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("TaxNumber")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Companies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01HY5K3D15E8BC6X9J9ZKBPNSM",
                            AddressId = "01H5QJ8KTMVRFZT58GQX902JD1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "info@techspace.com",
                            IsBlocked = false,
                            Name = "TechSpace Ltd.",
                            Phone = "+1-555-1234",
                            TaxNumber = "1234567890",
                            TenantId = "01H5PY6RF4WKFCR9VCMY2QNFGP"
                        },
                        new
                        {
                            Id = "01HY5K3NCA4D8RYYWRZZ1RZD1X",
                            AddressId = "01H5QJ8RTMVRFZT58GQX902JD2",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "contact@greencore.io",
                            IsBlocked = false,
                            Name = "Greencore Solutions",
                            Phone = "+1-555-6789",
                            TaxNumber = "9876543210",
                            TenantId = "01H5QJ6PVB8FYN4QXMR3T7JC9A"
                        },
                        new
                        {
                            Id = "01HY5K3SH4XNFQ6MTFD1EZRAZB",
                            AddressId = "01H5QJ9ZTMVRFZT58GQX902JD3",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hello@novainc.com",
                            IsBlocked = false,
                            Name = "NovaIndustries Inc.",
                            Phone = "+1-555-4321",
                            TaxNumber = "1122334455",
                            TenantId = "01H5QJ7XQZKTYZ9QW8VRCMND5B"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Dish", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("Id");

                    b.Property<string>("Allergens")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Ingredients")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("MenuCategoryId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PortionSize")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("Dishes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01GRQX9AYRHCA5Y5X3GPKPZ92P",
                            Allergens = "None",
                            CreatedAt = new DateTime(2025, 4, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Juicy grilled chicken with spices",
                            ImageUrl = "/images/GrilledChicken.webp",
                            Ingredients = "Chicken, spices, olive oil",
                            IsAvailable = true,
                            MenuCategoryId = "01H5QJ3DHBM8J6AW04FKPJP5VV",
                            Name = "Grilled Chicken",
                            PortionSize = "Large",
                            Price = 12.99m,
                            Weight = 250.0
                        },
                        new
                        {
                            Id = "01GRQX9AYRHCA5Y5X3GPKPZ93Q",
                            Allergens = "None",
                            CreatedAt = new DateTime(2025, 4, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fresh seasonal vegetables with olive oil",
                            ImageUrl = "/images/VegetableSalad.jpg",
                            Ingredients = "Lettuce, tomatoes, cucumber, olive oil",
                            IsAvailable = true,
                            MenuCategoryId = "01H5QJ3DJ22VXVG28Q0RYMNQEY",
                            Name = "Vegetable Salad",
                            PortionSize = "Medium",
                            Price = 8.50m,
                            Weight = 150.0
                        },
                        new
                        {
                            Id = "01H5PY6RCAKEQ7VNK35P6XZ48Z",
                            Allergens = "Eggs, Milk",
                            CreatedAt = new DateTime(2025, 4, 20, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rich and creamy chocolate cake",
                            ImageUrl = "/images/ChocolateCake.jpg",
                            Ingredients = "Chocolate, flour, sugar, eggs, butter",
                            IsAvailable = false,
                            MenuCategoryId = "01H5QJ3DR6R35WTKTPGFPJ89JC",
                            Name = "Chocolate Cake",
                            PortionSize = "Small",
                            Price = 5.99m,
                            Weight = 300.0
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.MenuCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("MenuCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ3DHBM8J6AW04FKPJP5VV",
                            CreatedAt = new DateTime(2025, 4, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Start your meal with our delightful appetizers.",
                            Name = "Appetizers",
                            SupplierId = "01HY5Q0RPNMXCA2W6JXDMVVZ7B"
                        },
                        new
                        {
                            Id = "01H5QJ3DJ22VXVG28Q0RYMNQEY",
                            CreatedAt = new DateTime(2025, 4, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Delicious main courses to satisfy your hunger.",
                            Name = "Main Courses",
                            SupplierId = "01HY5Q0RPNMXCA2W6JXDMVVZ7B"
                        },
                        new
                        {
                            Id = "01H5QJ3DR6R35WTKTPGFPJ89JC",
                            CreatedAt = new DateTime(2025, 4, 20, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "End your meal with our sweet desserts.",
                            Name = "Desserts",
                            SupplierId = "01HY5Q0WRK6VFYHT9BA3H8RK3V"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("Id");

                    b.Property<string>("BlockReason")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("Id");

                    b.Property<string>("BlockReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tenants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5PY6RF4WKFCR9VCMY2QNFGP",
                            BlockReason = "",
                            CreatedAt = new DateTime(2025, 4, 21, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "First tenant"
                        },
                        new
                        {
                            Id = "01H5QJ6PVB8FYN4QXMR3T7JC9A",
                            BlockReason = "",
                            CreatedAt = new DateTime(2025, 4, 21, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Second tenant"
                        },
                        new
                        {
                            Id = "01H5QJ7XQZKTYZ9QW8VRCMND5B",
                            BlockReason = "",
                            CreatedAt = new DateTime(2025, 4, 22, 14, 15, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Third tenant"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Broker", b =>
                {
                    b.HasBaseType("CateringService.Domain.Entities.Approved.User");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasDiscriminator().HasValue("Broker");

                    b.HasData(
                        new
                        {
                            Id = "01HY5Q13CZD9FXT78GR1XWA2XB",
                            CreatedAt = new DateTime(2025, 4, 21, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Email = "dsorokin@brokeragepro.ru",
                            FirstName = "Dmitry",
                            IsBlocked = false,
                            LastName = "Sorokin",
                            MiddleName = "Petrovich",
                            PasswordHash = "hashed_secure_password",
                            Phone = "+7 (495) 987-65-43",
                            TenantId = "01H5QJ7XQZKTYZ9QW8VRCMND5B",
                            Role = "Accountant"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Customer", b =>
                {
                    b.HasBaseType("CateringService.Domain.Entities.Approved.User");

                    b.Property<string>("AddressId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TaxNumber")
                        .HasColumnType("integer");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("Users", t =>
                        {
                            t.Property("CompanyId")
                                .HasColumnName("Customer_CompanyId");
                        });

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            Id = "01HYZZZX7TS6AXK9R29X3PXJPX",
                            CreatedAt = new DateTime(2025, 4, 21, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Email = "osmirnova@cateringservice.ru",
                            FirstName = "Olga",
                            IsBlocked = false,
                            LastName = "Smirnova",
                            MiddleName = "Ivanovna",
                            PasswordHash = "hashed_customer_password",
                            Phone = "+7 (495) 000-11-22",
                            TenantId = "01H5PY6RF4WKFCR9VCMY2QNFGP",
                            CompanyId = "01HY5K3D15E8BC6X9J9ZKBPNSM",
                            TaxNumber = 123456789
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Supplier", b =>
                {
                    b.HasBaseType("CateringService.Domain.Entities.Approved.User");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasDiscriminator().HasValue("Supplier");

                    b.HasData(
                        new
                        {
                            Id = "01HY5Q0RPNMXCA2W6JXDMVVZ7B",
                            BlockReason = "",
                            CreatedAt = new DateTime(2025, 4, 21, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Email = "ikulikova@cateringservice.ru",
                            FirstName = "Irina",
                            IsBlocked = false,
                            LastName = "Kulikova",
                            MiddleName = "Alekseyevna",
                            PasswordHash = "hashed_password_here",
                            Phone = "+7 (495) 123-45-67",
                            TenantId = "01H5PY6RF4WKFCR9VCMY2QNFGP",
                            CompanyId = "01HY5K3D15E8BC6X9J9ZKBPNSM",
                            Position = "Supply Manager"
                        },
                        new
                        {
                            Id = "01HY5Q0WRK6VFYHT9BA3H8RK3V",
                            BlockReason = "",
                            CreatedAt = new DateTime(2025, 4, 21, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Email = "ivanov@cateringservice.ru",
                            FirstName = "Ivan",
                            IsBlocked = false,
                            LastName = "Ivanov",
                            MiddleName = "Ivanovich",
                            PasswordHash = "new_hashed_password",
                            Phone = "+7 (495) 155-55-67",
                            TenantId = "01H5QJ6PVB8FYN4QXMR3T7JC9A",
                            CompanyId = "01HY5K3NCA4D8RYYWRZZ1RZD1X",
                            Position = "Sales Manager"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Address", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Addresses")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Company", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Approved.Address", "Address")
                        .WithMany("Companies")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CateringService.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Companies")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Dish", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Approved.MenuCategory", "MenuCategory")
                        .WithMany("Dishes")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuCategory");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.MenuCategory", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Approved.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.User", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Address", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.MenuCategory", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Companies");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
