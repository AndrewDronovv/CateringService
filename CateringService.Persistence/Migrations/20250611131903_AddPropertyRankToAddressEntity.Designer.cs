// <auto-generated />
using System;
using CateringService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CateringService.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250611131903_AddPropertyRankToAddressEntity")]
    partial class AddPropertyRankToAddressEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("AddressId");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Comment")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<decimal?>("Rank")
                        .HasColumnType("numeric");

                    b.Property<string>("Region")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("StreetAndBuilding")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("char(6)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("City", "StreetAndBuilding")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("City", "StreetAndBuilding"), "GIN");

                    b.ToTable("Addresses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ8KTMVRFZT58GQX902JD1",
                            City = "New York",
                            Comment = "Office address",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 4, 21, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Main headquarters",
                            Region = "NY",
                            StreetAndBuilding = "123 Main St",
                            TenantId = "01H5PY6RF4WKFCR9VCMY2QNFGP",
                            Zip = "100001"
                        },
                        new
                        {
                            Id = "01H5QJ8RTMVRFZT58GQX902JD2",
                            City = "Berlin",
                            Comment = "Warehouse",
                            Country = "Germany",
                            CreatedAt = new DateTime(2025, 4, 22, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            Description = "Storage facility",
                            Region = "Berlin",
                            StreetAndBuilding = "45 Berliner Str.",
                            TenantId = "01H5QJ6PVB8FYN4QXMR3T7JC9A",
                            UpdatedAt = new DateTime(2025, 5, 1, 14, 45, 0, 0, DateTimeKind.Unspecified),
                            Zip = "200002"
                        },
                        new
                        {
                            Id = "01H5QJ9ZTMVRFZT58GQX902JD3",
                            City = "Tokyo",
                            Comment = "Retail store",
                            Country = "Japan",
                            CreatedAt = new DateTime(2025, 4, 23, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Flagship location",
                            Region = "Kanto",
                            StreetAndBuilding = "7-2 Shibuya",
                            TenantId = "01H5QJ7XQZKTYZ9QW8VRCMND5B",
                            UpdatedAt = new DateTime(2025, 5, 2, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Zip = "300003"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Dish", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("DishId");

                    b.Property<string>("Allergens")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Ingredients")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("MenuCategoryId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PortionSize")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MenuCategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Dishes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01GRQX9AYRHCA5Y5X3GPKPZ92P",
                            Allergens = "None",
                            CreatedAt = new DateTime(2025, 4, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Juicy grilled chicken with spices",
                            ImageUrl = "/images/GrilledChicken.webp",
                            Ingredients = "Chicken, spices, olive oil",
                            IsAvailable = true,
                            MenuCategoryId = "01H5QJ3DHBM8J6AW04FKPJP5VV",
                            Name = "Grilled Chicken",
                            PortionSize = "Large",
                            Price = 12.99m,
                            SupplierId = "01H5QJ6PTMVRFZT58GQX902JC4",
                            Weight = 250.0
                        },
                        new
                        {
                            Id = "01GRQX9AYRHCA5Y5X3GPKPZ93Q",
                            Allergens = "None",
                            CreatedAt = new DateTime(2025, 4, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fresh seasonal vegetables with olive oil",
                            ImageUrl = "/images/VegetableSalad.jpg",
                            Ingredients = "Lettuce, tomatoes, cucumber, olive oil",
                            IsAvailable = true,
                            MenuCategoryId = "01H5QJ3DJ22VXVG28Q0RYMNQEY",
                            Name = "Vegetable Salad",
                            PortionSize = "Medium",
                            Price = 8.50m,
                            SupplierId = "01H5QJ6PVB8FYN4QXMR3T7JC9A",
                            Weight = 150.0
                        },
                        new
                        {
                            Id = "01H5PY6RF4WKFCR9VCMY2QNFGP",
                            Allergens = "Eggs, Milk",
                            CreatedAt = new DateTime(2025, 4, 20, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rich and creamy chocolate cake",
                            ImageUrl = "/images/ChocolateCake.jpg",
                            Ingredients = "Chocolate, flour, sugar, eggs, butter",
                            IsAvailable = false,
                            MenuCategoryId = "01H5QJ3DR6R35WTKTPGFPJ89JC",
                            Name = "Chocolate Cake",
                            PortionSize = "Small",
                            Price = 5.99m,
                            SupplierId = "01H5QJ6PX4FTQY8KZVW9JMBT96",
                            Weight = 300.0
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.MenuCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("MenuCategoryId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("MenuCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ3DHBM8J6AW04FKPJP5VV",
                            CreatedAt = new DateTime(2025, 4, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Start your meal with our delightful appetizers.",
                            Name = "Appetizers",
                            SupplierId = "01H5QJ6PTMVRFZT58GQX902JC4"
                        },
                        new
                        {
                            Id = "01H5QJ3DJ22VXVG28Q0RYMNQEY",
                            CreatedAt = new DateTime(2025, 4, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Delicious main courses to satisfy your hunger.",
                            Name = "Main Courses",
                            SupplierId = "01H5QJ6PVB8FYN4QXMR3T7JC9A"
                        },
                        new
                        {
                            Id = "01H5QJ3DR6R35WTKTPGFPJ89JC",
                            CreatedAt = new DateTime(2025, 4, 20, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "End your meal with our sweet desserts.",
                            Name = "Desserts",
                            SupplierId = "01H5QJ6PX4FTQY8KZVW9JMBT96"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Broker", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("BrokerId");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Brokers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ35QJ64MC1BTD5NRQ34R7",
                            ContactInfo = "info@gourmetcatering.com",
                            Name = "Gourmet Catering"
                        },
                        new
                        {
                            Id = "01H5QJ36N1WHX5KDPQQGTVPVHC",
                            ContactInfo = "contact@healthykitchen.com",
                            Name = "Healthy Kitchen"
                        },
                        new
                        {
                            Id = "01H5QJ379P7NZR1X03XW0GM7MA",
                            ContactInfo = "support@eventplanners.com",
                            Name = "Event Planners Co."
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("CustomerId");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ37V03WH5TXE2N1AW3JF9",
                            CustomerType = "Individual",
                            FullName = "John Doe",
                            Phone = "+1-555-0123"
                        },
                        new
                        {
                            Id = "01H5QJ38KGWM2N56TFH99WQZ03",
                            CustomerType = "Individual",
                            FullName = "Jane Smith",
                            Phone = "+1-555-0456"
                        },
                        new
                        {
                            Id = "01H5QJ391M8PVG6ZWPK4GTN0D8",
                            CompanyName = "ACME Inc.",
                            CustomerType = "Corporate",
                            FullName = "Corporate Client",
                            Phone = "+1-555-0789",
                            TaxNumber = "1234567890"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Delivery", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("DeliveryId");

                    b.Property<string>("DeliveryPersonId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryPersonId");

                    b.ToTable("Deliveries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ399WTKN11Z9FMB02WT62",
                            DeliveryPersonId = "01H5QJ3AFV0T3ZQBGP19HK2K5V",
                            Status = "In Progress"
                        },
                        new
                        {
                            Id = "01H5QJ39VRZ2AN3YC94PM5FMPA",
                            DeliveryPersonId = "01H5QJ3BBCEKJ7MYNVK302XRYF",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = "01H5QJ3A8D7V2GPF2K4K3WH5C4",
                            DeliveryPersonId = "01H5QJ3BHR2FAYVZWNAD0XJJYE",
                            Status = "Delayed"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.DeliveryPerson", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("DeliveryPersonId");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryPersons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ3AFV0T3ZQBGP19HK2K5V",
                            ContactInfo = "alex.johnson@delivery.com",
                            Name = "Alex Johnson"
                        },
                        new
                        {
                            Id = "01H5QJ3BBCEKJ7MYNVK302XRYF",
                            ContactInfo = "maria.gonzalez@delivery.com",
                            Name = "Maria Gonzalez"
                        },
                        new
                        {
                            Id = "01H5QJ3BHR2FAYVZWNAD0XJJYE",
                            ContactInfo = "william.smith@delivery.com",
                            Name = "William Smith"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Incident", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("IncidentId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeliveryId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.ToTable("Incidents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ3BTSX3JJ3F6DTQVFX86P",
                            Date = new DateTime(2025, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryId = "01H5QJ399WTKN11Z9FMB02WT62",
                            Description = "Late delivery due to traffic jam",
                            Resolution = "Customer notified and accepted delay"
                        },
                        new
                        {
                            Id = "01H5QJ3CB21J8GEPKGXZ80WRQ9",
                            Date = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryId = "01H5QJ39VRZ2AN3YC94PM5FMPA",
                            Description = "Damaged package during delivery",
                            Resolution = "Replacement item sent to customer"
                        },
                        new
                        {
                            Id = "01H5QJ3CC0PF6XRTA21DW3QPEK",
                            Date = new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryId = "01H5QJ3A8D7V2GPF2K4K3WH5C4",
                            Description = "Wrong address provided by customer",
                            Resolution = "Correct address obtained and delivery rescheduled"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("InvoiceId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BrokerId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Invoices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ3CZ4FBZAMT62XXYY24FZ",
                            Amount = 500.00m,
                            BrokerId = "01H5QJ35QJ64MC1BTD5NRQ34R7",
                            DateIssued = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            SupplierId = "01H5QJ6PTMVRFZT58GQX902JC4"
                        },
                        new
                        {
                            Id = "01H5QJ3D5T7JV9B1VQF6BRFV4P",
                            Amount = 1500.50m,
                            BrokerId = "01H5QJ36N1WHX5KDPQQGTVPVHC",
                            DateIssued = new DateTime(2025, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Unpaid",
                            SupplierId = "01H5QJ6PVB8FYN4QXMR3T7JC9A"
                        },
                        new
                        {
                            Id = "01H5QJ3DF6RQG96Q3VK7JBY58N",
                            Amount = 800.75m,
                            BrokerId = "01H5QJ379P7NZR1X03XW0GM7MA",
                            DateIssued = new DateTime(2025, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            SupplierId = "01H5QJ6PX4FTQY8KZVW9JMBT96"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("OrderId");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeliveryId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ3DZP8N3A1EQNHQZK7GTT",
                            CustomerId = "01H5QJ37V03WH5TXE2N1AW3JF9",
                            DeliveryDate = new DateTime(2025, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryId = "01H5QJ399WTKN11Z9FMB02WT62",
                            OrderDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            SupplierId = "01H5QJ6PTMVRFZT58GQX902JC4",
                            TotalPrice = 250.00m
                        },
                        new
                        {
                            Id = "01H5QJ3E1TZPGJ82MMZ20WX44Z",
                            CustomerId = "01H5QJ38KGWM2N56TFH99WQZ03",
                            DeliveryDate = new DateTime(2025, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryId = "01H5QJ39VRZ2AN3YC94PM5FMPA",
                            OrderDate = new DateTime(2025, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            SupplierId = "01H5QJ6PVB8FYN4QXMR3T7JC9A",
                            TotalPrice = 150.75m
                        },
                        new
                        {
                            Id = "01H5QJ3E3P7D4X8KVT4X30PKKQ",
                            CustomerId = "01H5QJ391M8PVG6ZWPK4GTN0D8",
                            DeliveryDate = new DateTime(2025, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryId = "01H5QJ3A8D7V2GPF2K4K3WH5C4",
                            OrderDate = new DateTime(2025, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Cancelled",
                            SupplierId = "01H5QJ6PX4FTQY8KZVW9JMBT96",
                            TotalPrice = 300.50m
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("OrderItemId");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ3E5929D8TFHK4M4PK0YE",
                            DishId = "01GRQX9AYRHCA5Y5X3GPKPZ92P",
                            OrderId = "01H5QJ3DZP8N3A1EQNHQZK7GTT",
                            Price = 25.00m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = "01H5QJ3E72PFV0T3XN92K4W59V",
                            DishId = "01GRQX9AYRHCA5Y5X3GPKPZ93Q",
                            OrderId = "01H5QJ3E1TZPGJ82MMZ20WX44Z",
                            Price = 15.50m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = "01H5QJ6P1YKRV9FX54Z0W3PJAY",
                            DishId = "01H5PY6RF4WKFCR9VCMY2QNFGP",
                            OrderId = "01H5QJ3E3P7D4X8KVT4X30PKKQ",
                            Price = 45.75m,
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Promotion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("PromotionId");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Promotions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ6P88F6YXPNKJX42VFYB5",
                            Condition = "Minimum order $100",
                            DiscountValue = 15.00m,
                            EndDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = "01H5QJ6PTMVRFZT58GQX902JC4",
                            Type = "Percentage"
                        },
                        new
                        {
                            Id = "01H5QJ6PCZJ70AW3MMFGXK5TBQ",
                            Condition = "For first-time customers",
                            DiscountValue = 20.00m,
                            EndDate = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = "01H5QJ6PVB8FYN4QXMR3T7JC9A",
                            Type = "Fixed Amount"
                        },
                        new
                        {
                            Id = "01H5QJ6PFAWWNG1T52BZ20RQFX",
                            Condition = "For orders over $50",
                            DiscountValue = 0.00m,
                            EndDate = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = "01H5QJ6PX4FTQY8KZVW9JMBT96",
                            Type = "Free Delivery"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Report", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("ReportId");

                    b.Property<string>("BrokerId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("GeneratedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.ToTable("Reports", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ6PJXP3KN3ZMCXGTFY8P9",
                            BrokerId = "01H5QJ35QJ64MC1BTD5NRQ34R7",
                            Details = "Detailed performance report for Q1.",
                            GeneratedDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Performance"
                        },
                        new
                        {
                            Id = "01H5QJ6PMZ48BVTCJMK30RW9J6",
                            BrokerId = "01H5QJ36N1WHX5KDPQQGTVPVHC",
                            Details = "Compliance report for catering regulations.",
                            GeneratedDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Compliance"
                        },
                        new
                        {
                            Id = "01H5QJ6PRJAXFV54N82M3TQXJY",
                            BrokerId = "01H5QJ379P7NZR1X03XW0GM7MA",
                            Details = "Comprehensive financial analysis for last quarter.",
                            GeneratedDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Financial"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("SupplierId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5QJ6PTMVRFZT58GQX902JC4",
                            Address = "123 Market Street, City A",
                            CompanyName = "Fresh Produce Supplier",
                            ContactName = "John Doe",
                            Phone = "+1234567890",
                            TaxNumber = "123456789"
                        },
                        new
                        {
                            Id = "01H5QJ6PVB8FYN4QXMR3T7JC9A",
                            Address = "456 Business Blvd, City B",
                            CompanyName = "Global Catering Supplies",
                            ContactName = "Jane Smith",
                            Phone = "+0987654321",
                            TaxNumber = "987654321"
                        },
                        new
                        {
                            Id = "01H5QJ6PX4FTQY8KZVW9JMBT96",
                            Address = "789 Green Lane, City C",
                            CompanyName = "Organic Goods Co.",
                            ContactName = "Alice Johnson",
                            Phone = "+1122334455",
                            TaxNumber = "112233445"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("TenantId");

                    b.Property<string>("BlockReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Tenants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5PY6RF4WKFCR9VCMY2QNFGP",
                            BlockReason = "",
                            CreatedAt = new DateTime(2025, 4, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "First tenant"
                        },
                        new
                        {
                            Id = "01H5QJ6PVB8FYN4QXMR3T7JC9A",
                            BlockReason = "",
                            CreatedAt = new DateTime(2025, 4, 21, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Second tenant"
                        },
                        new
                        {
                            Id = "01H5QJ7XQZKTYZ9QW8VRCMND5B",
                            BlockReason = "",
                            CreatedAt = new DateTime(2025, 4, 22, 14, 15, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Third tenant"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Address", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Addresses")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Dish", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Approved.MenuCategory", "MenuCategory")
                        .WithMany("Dishes")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CateringService.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Dishes")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("MenuCategory");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.MenuCategory", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Supplier", "Supplier")
                        .WithMany("MenuCategories")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Delivery", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.DeliveryPerson", "DeliveryPerson")
                        .WithMany("Deliveries")
                        .HasForeignKey("DeliveryPersonId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("DeliveryPerson");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Incident", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Delivery", "Delivery")
                        .WithMany("Incidents")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Broker", "Broker")
                        .WithMany("Invoices")
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CateringService.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Invoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Broker");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Order", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CateringService.Domain.Entities.Delivery", "Delivery")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CateringService.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Delivery");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Approved.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CateringService.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Promotion", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Promotions")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Report", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Broker", "Broker")
                        .WithMany("Reports")
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Broker");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.MenuCategory", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Broker", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Delivery", b =>
                {
                    b.Navigation("Incidents");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.DeliveryPerson", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("Invoices");

                    b.Navigation("MenuCategories");

                    b.Navigation("Orders");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
