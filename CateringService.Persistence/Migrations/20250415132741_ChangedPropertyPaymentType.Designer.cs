// <auto-generated />
using System;
using CateringService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CateringService.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250415132741_ChangedPropertyPaymentType")]
    partial class ChangedPropertyPaymentType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CateringService.Domain.Entities.Broker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("BrokerId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Brokers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactInfo = "info@gourmetcatering.com",
                            Name = "Gourmet Catering"
                        },
                        new
                        {
                            Id = 2,
                            ContactInfo = "contact@healthykitchen.com",
                            Name = "Healthy Kitchen"
                        },
                        new
                        {
                            Id = 3,
                            ContactInfo = "support@eventplanners.com",
                            Name = "Event Planners Co."
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CustomerId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactInfo = "john.doe@example.com",
                            Name = "John Doe",
                            PaymentType = "CreditCard"
                        },
                        new
                        {
                            Id = 2,
                            ContactInfo = "jane.smith@domain.com",
                            Name = "Jane Smith",
                            PaymentType = "PayPal"
                        },
                        new
                        {
                            Id = 3,
                            ContactInfo = "contact@corporate.com",
                            Name = "Corporate Client",
                            PaymentType = "Cash"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("DeliveryId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeliveryPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryPersonId");

                    b.ToTable("Deliveries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveryPersonId = 1,
                            Status = "In Progress"
                        },
                        new
                        {
                            Id = 2,
                            DeliveryPersonId = 2,
                            Status = "Completed"
                        },
                        new
                        {
                            Id = 3,
                            DeliveryPersonId = 3,
                            Status = "Delayed"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.DeliveryPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("DeliveryPersonId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryPersons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactInfo = "alex.johnson@delivery.com",
                            Name = "Alex Johnson"
                        },
                        new
                        {
                            Id = 2,
                            ContactInfo = "maria.gonzalez@delivery.com",
                            Name = "Maria Gonzalez"
                        },
                        new
                        {
                            Id = 3,
                            ContactInfo = "william.smith@delivery.com",
                            Name = "William Smith"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("DishId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AvailabilityStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Descritpion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("MenuSectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MenuSectionId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Dishes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailabilityStatus = true,
                            Descritpion = "Juicy grilled chicken with spices",
                            Image = "grilled_chicken.jpg",
                            Ingredients = "Chicken, spices, olive oil",
                            MenuSectionId = 1,
                            Name = "Grilled Chicken",
                            Price = 12.99m,
                            SupplierId = 1,
                            Weight = 250.0
                        },
                        new
                        {
                            Id = 2,
                            AvailabilityStatus = true,
                            Descritpion = "Fresh seasonal vegetables with olive oil",
                            Image = "veggie_salad.jpg",
                            Ingredients = "Lettuce, tomatoes, cucumber, olive oil",
                            MenuSectionId = 2,
                            Name = "Vegetable Salad",
                            Price = 8.50m,
                            SupplierId = 2,
                            Weight = 150.0
                        },
                        new
                        {
                            Id = 3,
                            AvailabilityStatus = false,
                            Descritpion = "Rich and creamy chocolate cake",
                            Image = "chocolate_cake.jpg",
                            Ingredients = "Chocolate, flour, sugar, eggs, butter",
                            MenuSectionId = 3,
                            Name = "Chocolate Cake",
                            Price = 5.99m,
                            SupplierId = 3,
                            Weight = 300.0
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Incident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IncidentId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.ToTable("Incidents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryId = 1,
                            Description = "Late delivery due to traffic jam",
                            Resolution = "Customer notified and accepted delay"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryId = 2,
                            Description = "Damaged package during delivery",
                            Resolution = "Replacement item sent to customer"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryId = 3,
                            Description = "Wrong address provided by customer",
                            Resolution = "Correct address obtained and delivery rescheduled"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("InvoiceId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BrokerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Invoices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 500.00m,
                            BrokerId = 1,
                            DateIssued = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1500.50m,
                            BrokerId = 2,
                            DateIssued = new DateTime(2025, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Unpaid",
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = 800.75m,
                            BrokerId = 3,
                            DateIssued = new DateTime(2025, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            SupplierId = 3
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.MenuSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("MenuSectionId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("MenuSections", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Appetizers",
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Main Courses",
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Desserts",
                            SupplierId = 3
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("OrderId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            DeliveryDate = new DateTime(2025, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryId = 1,
                            OrderDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            SupplierId = 1,
                            TotalPrice = 250.00m
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            DeliveryDate = new DateTime(2025, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryId = 2,
                            OrderDate = new DateTime(2025, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            SupplierId = 2,
                            TotalPrice = 150.75m
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            DeliveryDate = new DateTime(2025, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryId = 3,
                            OrderDate = new DateTime(2025, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Cancelled",
                            SupplierId = 3,
                            TotalPrice = 300.50m
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("OrderItemId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DishId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DishId = 1,
                            OrderId = 1,
                            Price = 25.00m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 2,
                            DishId = 2,
                            OrderId = 2,
                            Price = 15.50m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            DishId = 3,
                            OrderId = 3,
                            Price = 45.75m,
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PromotionId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Promotions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Condition = "Minimum order $100",
                            DiscountValue = 15.00m,
                            EndDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1,
                            Type = "Percentage"
                        },
                        new
                        {
                            Id = 2,
                            Condition = "For first-time customers",
                            DiscountValue = 20.00m,
                            EndDate = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 2,
                            Type = "Fixed Amount"
                        },
                        new
                        {
                            Id = 3,
                            Condition = "For orders over $50",
                            DiscountValue = 0.00m,
                            EndDate = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 3,
                            Type = "Free Delivery"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ReportId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrokerId")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("GeneratedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.ToTable("Reports", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrokerId = 1,
                            Details = "Detailed performance report for Q1.",
                            GeneratedDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Performance"
                        },
                        new
                        {
                            Id = 2,
                            BrokerId = 2,
                            Details = "Compliance report for catering regulations.",
                            GeneratedDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Compliance"
                        },
                        new
                        {
                            Id = 3,
                            BrokerId = 3,
                            Details = "Comprehensive financial analysis for last quarter.",
                            GeneratedDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Financial"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SupplierId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("Описание поставщика");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Ссылка на логотип поставщика");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("WorkingHours")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Suppliers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Поставщик свежих продуктов для ресторанов",
                            Email = "contact@freshproduce.com",
                            IsActive = true,
                            Logo = "https://example.com/logo1.png",
                            Name = "Fresh Produce Supplier",
                            Phone = "+1234567890",
                            WorkingHours = 8
                        },
                        new
                        {
                            Id = 2,
                            Description = "Глобальный поставщик кейтерингового оборудования",
                            Email = "info@globalcatering.com",
                            IsActive = true,
                            Logo = "https://example.com/logo2.png",
                            Name = "Global Catering Supplies",
                            Phone = "+0987654321",
                            WorkingHours = 10
                        },
                        new
                        {
                            Id = 3,
                            Description = "Поставщик органических продуктов питания",
                            Email = "sales@organicgoods.com",
                            IsActive = false,
                            Logo = "https://example.com/logo3.png",
                            Name = "Organic Goods Co.",
                            Phone = "+1122334455",
                            WorkingHours = 6
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Delivery", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.DeliveryPerson", "DeliveryPerson")
                        .WithMany("Deliveries")
                        .HasForeignKey("DeliveryPersonId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("DeliveryPerson");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Dish", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.MenuSection", "MenuSection")
                        .WithMany("Dishes")
                        .HasForeignKey("MenuSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CateringService.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Dishes")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("MenuSection");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Incident", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Delivery", "Delivery")
                        .WithMany("Incidents")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Broker", "Broker")
                        .WithMany("Invoices")
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CateringService.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Invoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Broker");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.MenuSection", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Supplier", "Supplier")
                        .WithMany("MenuSections")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Order", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CateringService.Domain.Entities.Delivery", "Delivery")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CateringService.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Delivery");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CateringService.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Promotion", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Promotions")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Report", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Broker", "Broker")
                        .WithMany("Reports")
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Broker");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Broker", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Delivery", b =>
                {
                    b.Navigation("Incidents");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.DeliveryPerson", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.MenuSection", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("Invoices");

                    b.Navigation("MenuSections");

                    b.Navigation("Orders");

                    b.Navigation("Promotions");
                });
#pragma warning restore 612, 618
        }
    }
}
