// <auto-generated />
using System;
using CateringService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CateringService.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250623074709_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("Id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Comment")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Region")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("StreetAndBuilding")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("char(6)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("Zip")
                        .IsUnique();

                    b.HasIndex("City", "StreetAndBuilding")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("City", "StreetAndBuilding"), "GIN");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Dish", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("Id");

                    b.Property<string>("Allergens")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Ingredients")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("MenuCategoryId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PortionSize")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("Dishes", (string)null);
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.MenuCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("MenuCategories", (string)null);
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("Id");

                    b.Property<string>("BlockReason")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("Id");

                    b.Property<string>("BlockReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tenants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H5PY6RF4WKFCR9VCMY2QNFGP",
                            BlockReason = "",
                            CreatedAt = new DateTime(2025, 4, 21, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "First tenant"
                        },
                        new
                        {
                            Id = "01H5QJ6PVB8FYN4QXMR3T7JC9A",
                            BlockReason = "",
                            CreatedAt = new DateTime(2025, 4, 21, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Second tenant"
                        },
                        new
                        {
                            Id = "01H5QJ7XQZKTYZ9QW8VRCMND5B",
                            BlockReason = "",
                            CreatedAt = new DateTime(2025, 4, 22, 14, 15, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Third tenant"
                        });
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Broker", b =>
                {
                    b.HasBaseType("CateringService.Domain.Entities.Approved.User");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasDiscriminator().HasValue("Broker");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Customer", b =>
                {
                    b.HasBaseType("CateringService.Domain.Entities.Approved.User");

                    b.Property<string>("AddressId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<int>("TaxNumber")
                        .HasColumnType("integer");

                    b.ToTable("Users", t =>
                        {
                            t.Property("CompanyId")
                                .HasColumnName("Customer_CompanyId");
                        });

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Supplier", b =>
                {
                    b.HasBaseType("CateringService.Domain.Entities.Approved.User");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasDiscriminator().HasValue("Supplier");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Address", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Addresses")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.Dish", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Approved.MenuCategory", "MenuCategory")
                        .WithMany("Dishes")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuCategory");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.MenuCategory", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Approved.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.User", b =>
                {
                    b.HasOne("CateringService.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Approved.MenuCategory", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("CateringService.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
